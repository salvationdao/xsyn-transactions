// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AccountCode is an object representing the database table.
type AccountCode struct {
	ID    int    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Label string `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`

	R *accountCodeR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L accountCodeL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AccountCodeColumns = struct {
	ID    string
	Label string
}{
	ID:    "id",
	Label: "label",
}

var AccountCodeTableColumns = struct {
	ID    string
	Label string
}{
	ID:    "account_codes.id",
	Label: "account_codes.label",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var AccountCodeWhere = struct {
	ID    whereHelperint
	Label whereHelperstring
}{
	ID:    whereHelperint{field: "\"account_codes\".\"id\""},
	Label: whereHelperstring{field: "\"account_codes\".\"label\""},
}

// AccountCodeRels is where relationship names are stored.
var AccountCodeRels = struct {
	Accounts string
}{
	Accounts: "Accounts",
}

// accountCodeR is where relationships are stored.
type accountCodeR struct {
	Accounts AccountSlice `boiler:"Accounts" boil:"Accounts" json:"Accounts" toml:"Accounts" yaml:"Accounts"`
}

// NewStruct creates a new relationship struct
func (*accountCodeR) NewStruct() *accountCodeR {
	return &accountCodeR{}
}

func (r *accountCodeR) GetAccounts() AccountSlice {
	if r == nil {
		return nil
	}
	return r.Accounts
}

// accountCodeL is where Load methods for each relationship are stored.
type accountCodeL struct{}

var (
	accountCodeAllColumns            = []string{"id", "label"}
	accountCodeColumnsWithoutDefault = []string{"id", "label"}
	accountCodeColumnsWithDefault    = []string{}
	accountCodePrimaryKeyColumns     = []string{"id"}
	accountCodeGeneratedColumns      = []string{}
)

type (
	// AccountCodeSlice is an alias for a slice of pointers to AccountCode.
	// This should almost always be used instead of []AccountCode.
	AccountCodeSlice []*AccountCode
	// AccountCodeHook is the signature for custom AccountCode hook methods
	AccountCodeHook func(boil.Executor, *AccountCode) error

	accountCodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	accountCodeType                 = reflect.TypeOf(&AccountCode{})
	accountCodeMapping              = queries.MakeStructMapping(accountCodeType)
	accountCodePrimaryKeyMapping, _ = queries.BindMapping(accountCodeType, accountCodeMapping, accountCodePrimaryKeyColumns)
	accountCodeInsertCacheMut       sync.RWMutex
	accountCodeInsertCache          = make(map[string]insertCache)
	accountCodeUpdateCacheMut       sync.RWMutex
	accountCodeUpdateCache          = make(map[string]updateCache)
	accountCodeUpsertCacheMut       sync.RWMutex
	accountCodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var accountCodeAfterSelectHooks []AccountCodeHook

var accountCodeBeforeInsertHooks []AccountCodeHook
var accountCodeAfterInsertHooks []AccountCodeHook

var accountCodeBeforeUpdateHooks []AccountCodeHook
var accountCodeAfterUpdateHooks []AccountCodeHook

var accountCodeBeforeDeleteHooks []AccountCodeHook
var accountCodeAfterDeleteHooks []AccountCodeHook

var accountCodeBeforeUpsertHooks []AccountCodeHook
var accountCodeAfterUpsertHooks []AccountCodeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AccountCode) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range accountCodeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AccountCode) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range accountCodeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AccountCode) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range accountCodeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AccountCode) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range accountCodeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AccountCode) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range accountCodeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AccountCode) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range accountCodeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AccountCode) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range accountCodeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AccountCode) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range accountCodeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AccountCode) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range accountCodeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAccountCodeHook registers your hook function for all future operations.
func AddAccountCodeHook(hookPoint boil.HookPoint, accountCodeHook AccountCodeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		accountCodeAfterSelectHooks = append(accountCodeAfterSelectHooks, accountCodeHook)
	case boil.BeforeInsertHook:
		accountCodeBeforeInsertHooks = append(accountCodeBeforeInsertHooks, accountCodeHook)
	case boil.AfterInsertHook:
		accountCodeAfterInsertHooks = append(accountCodeAfterInsertHooks, accountCodeHook)
	case boil.BeforeUpdateHook:
		accountCodeBeforeUpdateHooks = append(accountCodeBeforeUpdateHooks, accountCodeHook)
	case boil.AfterUpdateHook:
		accountCodeAfterUpdateHooks = append(accountCodeAfterUpdateHooks, accountCodeHook)
	case boil.BeforeDeleteHook:
		accountCodeBeforeDeleteHooks = append(accountCodeBeforeDeleteHooks, accountCodeHook)
	case boil.AfterDeleteHook:
		accountCodeAfterDeleteHooks = append(accountCodeAfterDeleteHooks, accountCodeHook)
	case boil.BeforeUpsertHook:
		accountCodeBeforeUpsertHooks = append(accountCodeBeforeUpsertHooks, accountCodeHook)
	case boil.AfterUpsertHook:
		accountCodeAfterUpsertHooks = append(accountCodeAfterUpsertHooks, accountCodeHook)
	}
}

// One returns a single accountCode record from the query.
func (q accountCodeQuery) One(exec boil.Executor) (*AccountCode, error) {
	o := &AccountCode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for account_codes")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AccountCode records from the query.
func (q accountCodeQuery) All(exec boil.Executor) (AccountCodeSlice, error) {
	var o []*AccountCode

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to AccountCode slice")
	}

	if len(accountCodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AccountCode records in the query.
func (q accountCodeQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count account_codes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q accountCodeQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if account_codes exists")
	}

	return count > 0, nil
}

// Accounts retrieves all the account's Accounts with an executor.
func (o *AccountCode) Accounts(mods ...qm.QueryMod) accountQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"accounts\".\"account_code\"=?", o.ID),
	)

	return Accounts(queryMods...)
}

// LoadAccounts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (accountCodeL) LoadAccounts(e boil.Executor, singular bool, maybeAccountCode interface{}, mods queries.Applicator) error {
	var slice []*AccountCode
	var object *AccountCode

	if singular {
		var ok bool
		object, ok = maybeAccountCode.(*AccountCode)
		if !ok {
			object = new(AccountCode)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAccountCode)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAccountCode))
			}
		}
	} else {
		s, ok := maybeAccountCode.(*[]*AccountCode)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAccountCode)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAccountCode))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &accountCodeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accountCodeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`accounts`),
		qm.WhereIn(`accounts.account_code in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load accounts")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice accounts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on accounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for accounts")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Accounts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &accountR{}
			}
			foreign.R.AccountAccountCode = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AccountCode {
				local.R.Accounts = append(local.R.Accounts, foreign)
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.AccountAccountCode = local
				break
			}
		}
	}

	return nil
}

// AddAccounts adds the given related objects to the existing relationships
// of the account_code, optionally inserting them as new records.
// Appends related to o.R.Accounts.
// Sets related.R.AccountAccountCode appropriately.
func (o *AccountCode) AddAccounts(exec boil.Executor, insert bool, related ...*Account) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AccountCode = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"accounts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"account_code"}),
				strmangle.WhereClause("\"", "\"", 2, accountPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AccountCode = o.ID
		}
	}

	if o.R == nil {
		o.R = &accountCodeR{
			Accounts: related,
		}
	} else {
		o.R.Accounts = append(o.R.Accounts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &accountR{
				AccountAccountCode: o,
			}
		} else {
			rel.R.AccountAccountCode = o
		}
	}
	return nil
}

// AccountCodes retrieves all the records using an executor.
func AccountCodes(mods ...qm.QueryMod) accountCodeQuery {
	mods = append(mods, qm.From("\"account_codes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"account_codes\".*"})
	}

	return accountCodeQuery{q}
}

// FindAccountCode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAccountCode(exec boil.Executor, iD int, selectCols ...string) (*AccountCode, error) {
	accountCodeObj := &AccountCode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"account_codes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, accountCodeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from account_codes")
	}

	if err = accountCodeObj.doAfterSelectHooks(exec); err != nil {
		return accountCodeObj, err
	}

	return accountCodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AccountCode) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no account_codes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountCodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	accountCodeInsertCacheMut.RLock()
	cache, cached := accountCodeInsertCache[key]
	accountCodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			accountCodeAllColumns,
			accountCodeColumnsWithDefault,
			accountCodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(accountCodeType, accountCodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(accountCodeType, accountCodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"account_codes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"account_codes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into account_codes")
	}

	if !cached {
		accountCodeInsertCacheMut.Lock()
		accountCodeInsertCache[key] = cache
		accountCodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the AccountCode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AccountCode) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	accountCodeUpdateCacheMut.RLock()
	cache, cached := accountCodeUpdateCache[key]
	accountCodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			accountCodeAllColumns,
			accountCodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update account_codes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"account_codes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, accountCodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(accountCodeType, accountCodeMapping, append(wl, accountCodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update account_codes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for account_codes")
	}

	if !cached {
		accountCodeUpdateCacheMut.Lock()
		accountCodeUpdateCache[key] = cache
		accountCodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q accountCodeQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for account_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for account_codes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AccountCodeSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"account_codes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, accountCodePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in accountCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all accountCode")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AccountCode) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no account_codes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountCodeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	accountCodeUpsertCacheMut.RLock()
	cache, cached := accountCodeUpsertCache[key]
	accountCodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			accountCodeAllColumns,
			accountCodeColumnsWithDefault,
			accountCodeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			accountCodeAllColumns,
			accountCodePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert account_codes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(accountCodePrimaryKeyColumns))
			copy(conflict, accountCodePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"account_codes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(accountCodeType, accountCodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(accountCodeType, accountCodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert account_codes")
	}

	if !cached {
		accountCodeUpsertCacheMut.Lock()
		accountCodeUpsertCache[key] = cache
		accountCodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single AccountCode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AccountCode) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no AccountCode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), accountCodePrimaryKeyMapping)
	sql := "DELETE FROM \"account_codes\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from account_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for account_codes")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q accountCodeQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no accountCodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from account_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for account_codes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AccountCodeSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(accountCodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"account_codes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, accountCodePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from accountCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for account_codes")
	}

	if len(accountCodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AccountCode) Reload(exec boil.Executor) error {
	ret, err := FindAccountCode(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AccountCodeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AccountCodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"account_codes\".* FROM \"account_codes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, accountCodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in AccountCodeSlice")
	}

	*o = slice

	return nil
}

// AccountCodeExists checks if the AccountCode row exists.
func AccountCodeExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"account_codes\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if account_codes exists")
	}

	return exists, nil
}
