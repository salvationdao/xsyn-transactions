// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Ledger is an object representing the database table.
type Ledger struct {
	ID    int    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Label string `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`

	R *ledgerR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L ledgerL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LedgerColumns = struct {
	ID    string
	Label string
}{
	ID:    "id",
	Label: "label",
}

var LedgerTableColumns = struct {
	ID    string
	Label string
}{
	ID:    "ledgers.id",
	Label: "ledgers.label",
}

// Generated where

var LedgerWhere = struct {
	ID    whereHelperint
	Label whereHelperstring
}{
	ID:    whereHelperint{field: "\"ledgers\".\"id\""},
	Label: whereHelperstring{field: "\"ledgers\".\"label\""},
}

// LedgerRels is where relationship names are stored.
var LedgerRels = struct {
	Accounts     string
	Transactions string
}{
	Accounts:     "Accounts",
	Transactions: "Transactions",
}

// ledgerR is where relationships are stored.
type ledgerR struct {
	Accounts     AccountSlice     `boiler:"Accounts" boil:"Accounts" json:"Accounts" toml:"Accounts" yaml:"Accounts"`
	Transactions TransactionSlice `boiler:"Transactions" boil:"Transactions" json:"Transactions" toml:"Transactions" yaml:"Transactions"`
}

// NewStruct creates a new relationship struct
func (*ledgerR) NewStruct() *ledgerR {
	return &ledgerR{}
}

func (r *ledgerR) GetAccounts() AccountSlice {
	if r == nil {
		return nil
	}
	return r.Accounts
}

func (r *ledgerR) GetTransactions() TransactionSlice {
	if r == nil {
		return nil
	}
	return r.Transactions
}

// ledgerL is where Load methods for each relationship are stored.
type ledgerL struct{}

var (
	ledgerAllColumns            = []string{"id", "label"}
	ledgerColumnsWithoutDefault = []string{"id", "label"}
	ledgerColumnsWithDefault    = []string{}
	ledgerPrimaryKeyColumns     = []string{"id"}
	ledgerGeneratedColumns      = []string{}
)

type (
	// LedgerSlice is an alias for a slice of pointers to Ledger.
	// This should almost always be used instead of []Ledger.
	LedgerSlice []*Ledger
	// LedgerHook is the signature for custom Ledger hook methods
	LedgerHook func(boil.Executor, *Ledger) error

	ledgerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ledgerType                 = reflect.TypeOf(&Ledger{})
	ledgerMapping              = queries.MakeStructMapping(ledgerType)
	ledgerPrimaryKeyMapping, _ = queries.BindMapping(ledgerType, ledgerMapping, ledgerPrimaryKeyColumns)
	ledgerInsertCacheMut       sync.RWMutex
	ledgerInsertCache          = make(map[string]insertCache)
	ledgerUpdateCacheMut       sync.RWMutex
	ledgerUpdateCache          = make(map[string]updateCache)
	ledgerUpsertCacheMut       sync.RWMutex
	ledgerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ledgerAfterSelectHooks []LedgerHook

var ledgerBeforeInsertHooks []LedgerHook
var ledgerAfterInsertHooks []LedgerHook

var ledgerBeforeUpdateHooks []LedgerHook
var ledgerAfterUpdateHooks []LedgerHook

var ledgerBeforeDeleteHooks []LedgerHook
var ledgerAfterDeleteHooks []LedgerHook

var ledgerBeforeUpsertHooks []LedgerHook
var ledgerAfterUpsertHooks []LedgerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Ledger) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range ledgerAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Ledger) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ledgerBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Ledger) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ledgerAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Ledger) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range ledgerBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Ledger) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range ledgerAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Ledger) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range ledgerBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Ledger) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range ledgerAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Ledger) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ledgerBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Ledger) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ledgerAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLedgerHook registers your hook function for all future operations.
func AddLedgerHook(hookPoint boil.HookPoint, ledgerHook LedgerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ledgerAfterSelectHooks = append(ledgerAfterSelectHooks, ledgerHook)
	case boil.BeforeInsertHook:
		ledgerBeforeInsertHooks = append(ledgerBeforeInsertHooks, ledgerHook)
	case boil.AfterInsertHook:
		ledgerAfterInsertHooks = append(ledgerAfterInsertHooks, ledgerHook)
	case boil.BeforeUpdateHook:
		ledgerBeforeUpdateHooks = append(ledgerBeforeUpdateHooks, ledgerHook)
	case boil.AfterUpdateHook:
		ledgerAfterUpdateHooks = append(ledgerAfterUpdateHooks, ledgerHook)
	case boil.BeforeDeleteHook:
		ledgerBeforeDeleteHooks = append(ledgerBeforeDeleteHooks, ledgerHook)
	case boil.AfterDeleteHook:
		ledgerAfterDeleteHooks = append(ledgerAfterDeleteHooks, ledgerHook)
	case boil.BeforeUpsertHook:
		ledgerBeforeUpsertHooks = append(ledgerBeforeUpsertHooks, ledgerHook)
	case boil.AfterUpsertHook:
		ledgerAfterUpsertHooks = append(ledgerAfterUpsertHooks, ledgerHook)
	}
}

// One returns a single ledger record from the query.
func (q ledgerQuery) One(exec boil.Executor) (*Ledger, error) {
	o := &Ledger{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for ledgers")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Ledger records from the query.
func (q ledgerQuery) All(exec boil.Executor) (LedgerSlice, error) {
	var o []*Ledger

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Ledger slice")
	}

	if len(ledgerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Ledger records in the query.
func (q ledgerQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count ledgers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ledgerQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if ledgers exists")
	}

	return count > 0, nil
}

// Accounts retrieves all the account's Accounts with an executor.
func (o *Ledger) Accounts(mods ...qm.QueryMod) accountQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"accounts\".\"ledger\"=?", o.ID),
	)

	return Accounts(queryMods...)
}

// Transactions retrieves all the transaction's Transactions with an executor.
func (o *Ledger) Transactions(mods ...qm.QueryMod) transactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"transactions\".\"ledger\"=?", o.ID),
	)

	return Transactions(queryMods...)
}

// LoadAccounts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (ledgerL) LoadAccounts(e boil.Executor, singular bool, maybeLedger interface{}, mods queries.Applicator) error {
	var slice []*Ledger
	var object *Ledger

	if singular {
		var ok bool
		object, ok = maybeLedger.(*Ledger)
		if !ok {
			object = new(Ledger)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLedger)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLedger))
			}
		}
	} else {
		s, ok := maybeLedger.(*[]*Ledger)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLedger)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLedger))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &ledgerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ledgerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`accounts`),
		qm.WhereIn(`accounts.ledger in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load accounts")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice accounts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on accounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for accounts")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Accounts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &accountR{}
			}
			foreign.R.AccountLedger = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Ledger {
				local.R.Accounts = append(local.R.Accounts, foreign)
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.AccountLedger = local
				break
			}
		}
	}

	return nil
}

// LoadTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (ledgerL) LoadTransactions(e boil.Executor, singular bool, maybeLedger interface{}, mods queries.Applicator) error {
	var slice []*Ledger
	var object *Ledger

	if singular {
		var ok bool
		object, ok = maybeLedger.(*Ledger)
		if !ok {
			object = new(Ledger)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLedger)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLedger))
			}
		}
	} else {
		s, ok := maybeLedger.(*[]*Ledger)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLedger)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLedger))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &ledgerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ledgerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`transactions`),
		qm.WhereIn(`transactions.ledger in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transactions")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transactions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Transactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionR{}
			}
			foreign.R.TransactionLedger = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Ledger {
				local.R.Transactions = append(local.R.Transactions, foreign)
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.TransactionLedger = local
				break
			}
		}
	}

	return nil
}

// AddAccounts adds the given related objects to the existing relationships
// of the ledger, optionally inserting them as new records.
// Appends related to o.R.Accounts.
// Sets related.R.AccountLedger appropriately.
func (o *Ledger) AddAccounts(exec boil.Executor, insert bool, related ...*Account) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Ledger = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"accounts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"ledger"}),
				strmangle.WhereClause("\"", "\"", 2, accountPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Ledger = o.ID
		}
	}

	if o.R == nil {
		o.R = &ledgerR{
			Accounts: related,
		}
	} else {
		o.R.Accounts = append(o.R.Accounts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &accountR{
				AccountLedger: o,
			}
		} else {
			rel.R.AccountLedger = o
		}
	}
	return nil
}

// AddTransactions adds the given related objects to the existing relationships
// of the ledger, optionally inserting them as new records.
// Appends related to o.R.Transactions.
// Sets related.R.TransactionLedger appropriately.
func (o *Ledger) AddTransactions(exec boil.Executor, insert bool, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Ledger = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transactions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"ledger"}),
				strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID, rel.CreatedAt}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Ledger = o.ID
		}
	}

	if o.R == nil {
		o.R = &ledgerR{
			Transactions: related,
		}
	} else {
		o.R.Transactions = append(o.R.Transactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionR{
				TransactionLedger: o,
			}
		} else {
			rel.R.TransactionLedger = o
		}
	}
	return nil
}

// Ledgers retrieves all the records using an executor.
func Ledgers(mods ...qm.QueryMod) ledgerQuery {
	mods = append(mods, qm.From("\"ledgers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ledgers\".*"})
	}

	return ledgerQuery{q}
}

// FindLedger retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLedger(exec boil.Executor, iD int, selectCols ...string) (*Ledger, error) {
	ledgerObj := &Ledger{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ledgers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, ledgerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from ledgers")
	}

	if err = ledgerObj.doAfterSelectHooks(exec); err != nil {
		return ledgerObj, err
	}

	return ledgerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Ledger) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no ledgers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ledgerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ledgerInsertCacheMut.RLock()
	cache, cached := ledgerInsertCache[key]
	ledgerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ledgerAllColumns,
			ledgerColumnsWithDefault,
			ledgerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ledgerType, ledgerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ledgerType, ledgerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ledgers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ledgers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into ledgers")
	}

	if !cached {
		ledgerInsertCacheMut.Lock()
		ledgerInsertCache[key] = cache
		ledgerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Ledger.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Ledger) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ledgerUpdateCacheMut.RLock()
	cache, cached := ledgerUpdateCache[key]
	ledgerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ledgerAllColumns,
			ledgerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update ledgers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ledgers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, ledgerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ledgerType, ledgerMapping, append(wl, ledgerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update ledgers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for ledgers")
	}

	if !cached {
		ledgerUpdateCacheMut.Lock()
		ledgerUpdateCache[key] = cache
		ledgerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ledgerQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for ledgers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for ledgers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LedgerSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ledgerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ledgers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ledgerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in ledger slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all ledger")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Ledger) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no ledgers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ledgerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ledgerUpsertCacheMut.RLock()
	cache, cached := ledgerUpsertCache[key]
	ledgerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			ledgerAllColumns,
			ledgerColumnsWithDefault,
			ledgerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			ledgerAllColumns,
			ledgerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert ledgers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(ledgerPrimaryKeyColumns))
			copy(conflict, ledgerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ledgers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(ledgerType, ledgerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ledgerType, ledgerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert ledgers")
	}

	if !cached {
		ledgerUpsertCacheMut.Lock()
		ledgerUpsertCache[key] = cache
		ledgerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Ledger record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Ledger) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Ledger provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ledgerPrimaryKeyMapping)
	sql := "DELETE FROM \"ledgers\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from ledgers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for ledgers")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ledgerQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no ledgerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from ledgers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for ledgers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LedgerSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ledgerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ledgerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ledgers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ledgerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from ledger slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for ledgers")
	}

	if len(ledgerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Ledger) Reload(exec boil.Executor) error {
	ret, err := FindLedger(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LedgerSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LedgerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ledgerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ledgers\".* FROM \"ledgers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ledgerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in LedgerSlice")
	}

	*o = slice

	return nil
}

// LedgerExists checks if the Ledger row exists.
func LedgerExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ledgers\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if ledgers exists")
	}

	return exists, nil
}
