// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: transactions/v1/transactions.proto

package transactionsv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
	v1 "xsyn-transactions/gen/transactions/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AccountsName is the fully-qualified name of the Accounts service.
	AccountsName = "transactions.v1.Accounts"
	// TransactorName is the fully-qualified name of the Transactor service.
	TransactorName = "transactions.v1.Transactor"
)

// AccountsClient is a client for the transactions.v1.Accounts service.
type AccountsClient interface {
	AccountGetViaUser(context.Context, *connect_go.Request[v1.AccountGetViaUserRequest]) (*connect_go.Response[v1.AccountGetViaUserResponse], error)
	AccountsUser(context.Context, *connect_go.Request[v1.AccountsUserRequest]) (*connect_go.Response[v1.AccountsUserResponse], error)
	GetBalance(context.Context, *connect_go.Request[v1.GetBalanceRequest]) (*connect_go.Response[v1.GetBalanceResponse], error)
	TransactionGetByID(context.Context, *connect_go.Request[v1.TransactionGetByIDRequest]) (*connect_go.Response[v1.TransactionGetByIDResponse], error)
	TransactionsGetByAccountID(context.Context, *connect_go.Request[v1.TransactionsGetByAccountIDRequest]) (*connect_go.Response[v1.TransactionsGetByAccountIDResponse], error)
}

// NewAccountsClient constructs a client for the transactions.v1.Accounts service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountsClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AccountsClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &accountsClient{
		accountGetViaUser: connect_go.NewClient[v1.AccountGetViaUserRequest, v1.AccountGetViaUserResponse](
			httpClient,
			baseURL+"/transactions.v1.Accounts/AccountGetViaUser",
			opts...,
		),
		accountsUser: connect_go.NewClient[v1.AccountsUserRequest, v1.AccountsUserResponse](
			httpClient,
			baseURL+"/transactions.v1.Accounts/AccountsUser",
			opts...,
		),
		getBalance: connect_go.NewClient[v1.GetBalanceRequest, v1.GetBalanceResponse](
			httpClient,
			baseURL+"/transactions.v1.Accounts/GetBalance",
			opts...,
		),
		transactionGetByID: connect_go.NewClient[v1.TransactionGetByIDRequest, v1.TransactionGetByIDResponse](
			httpClient,
			baseURL+"/transactions.v1.Accounts/TransactionGetByID",
			opts...,
		),
		transactionsGetByAccountID: connect_go.NewClient[v1.TransactionsGetByAccountIDRequest, v1.TransactionsGetByAccountIDResponse](
			httpClient,
			baseURL+"/transactions.v1.Accounts/TransactionsGetByAccountID",
			opts...,
		),
	}
}

// accountsClient implements AccountsClient.
type accountsClient struct {
	accountGetViaUser          *connect_go.Client[v1.AccountGetViaUserRequest, v1.AccountGetViaUserResponse]
	accountsUser               *connect_go.Client[v1.AccountsUserRequest, v1.AccountsUserResponse]
	getBalance                 *connect_go.Client[v1.GetBalanceRequest, v1.GetBalanceResponse]
	transactionGetByID         *connect_go.Client[v1.TransactionGetByIDRequest, v1.TransactionGetByIDResponse]
	transactionsGetByAccountID *connect_go.Client[v1.TransactionsGetByAccountIDRequest, v1.TransactionsGetByAccountIDResponse]
}

// AccountGetViaUser calls transactions.v1.Accounts.AccountGetViaUser.
func (c *accountsClient) AccountGetViaUser(ctx context.Context, req *connect_go.Request[v1.AccountGetViaUserRequest]) (*connect_go.Response[v1.AccountGetViaUserResponse], error) {
	return c.accountGetViaUser.CallUnary(ctx, req)
}

// AccountsUser calls transactions.v1.Accounts.AccountsUser.
func (c *accountsClient) AccountsUser(ctx context.Context, req *connect_go.Request[v1.AccountsUserRequest]) (*connect_go.Response[v1.AccountsUserResponse], error) {
	return c.accountsUser.CallUnary(ctx, req)
}

// GetBalance calls transactions.v1.Accounts.GetBalance.
func (c *accountsClient) GetBalance(ctx context.Context, req *connect_go.Request[v1.GetBalanceRequest]) (*connect_go.Response[v1.GetBalanceResponse], error) {
	return c.getBalance.CallUnary(ctx, req)
}

// TransactionGetByID calls transactions.v1.Accounts.TransactionGetByID.
func (c *accountsClient) TransactionGetByID(ctx context.Context, req *connect_go.Request[v1.TransactionGetByIDRequest]) (*connect_go.Response[v1.TransactionGetByIDResponse], error) {
	return c.transactionGetByID.CallUnary(ctx, req)
}

// TransactionsGetByAccountID calls transactions.v1.Accounts.TransactionsGetByAccountID.
func (c *accountsClient) TransactionsGetByAccountID(ctx context.Context, req *connect_go.Request[v1.TransactionsGetByAccountIDRequest]) (*connect_go.Response[v1.TransactionsGetByAccountIDResponse], error) {
	return c.transactionsGetByAccountID.CallUnary(ctx, req)
}

// AccountsHandler is an implementation of the transactions.v1.Accounts service.
type AccountsHandler interface {
	AccountGetViaUser(context.Context, *connect_go.Request[v1.AccountGetViaUserRequest]) (*connect_go.Response[v1.AccountGetViaUserResponse], error)
	AccountsUser(context.Context, *connect_go.Request[v1.AccountsUserRequest]) (*connect_go.Response[v1.AccountsUserResponse], error)
	GetBalance(context.Context, *connect_go.Request[v1.GetBalanceRequest]) (*connect_go.Response[v1.GetBalanceResponse], error)
	TransactionGetByID(context.Context, *connect_go.Request[v1.TransactionGetByIDRequest]) (*connect_go.Response[v1.TransactionGetByIDResponse], error)
	TransactionsGetByAccountID(context.Context, *connect_go.Request[v1.TransactionsGetByAccountIDRequest]) (*connect_go.Response[v1.TransactionsGetByAccountIDResponse], error)
}

// NewAccountsHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountsHandler(svc AccountsHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/transactions.v1.Accounts/AccountGetViaUser", connect_go.NewUnaryHandler(
		"/transactions.v1.Accounts/AccountGetViaUser",
		svc.AccountGetViaUser,
		opts...,
	))
	mux.Handle("/transactions.v1.Accounts/AccountsUser", connect_go.NewUnaryHandler(
		"/transactions.v1.Accounts/AccountsUser",
		svc.AccountsUser,
		opts...,
	))
	mux.Handle("/transactions.v1.Accounts/GetBalance", connect_go.NewUnaryHandler(
		"/transactions.v1.Accounts/GetBalance",
		svc.GetBalance,
		opts...,
	))
	mux.Handle("/transactions.v1.Accounts/TransactionGetByID", connect_go.NewUnaryHandler(
		"/transactions.v1.Accounts/TransactionGetByID",
		svc.TransactionGetByID,
		opts...,
	))
	mux.Handle("/transactions.v1.Accounts/TransactionsGetByAccountID", connect_go.NewUnaryHandler(
		"/transactions.v1.Accounts/TransactionsGetByAccountID",
		svc.TransactionsGetByAccountID,
		opts...,
	))
	return "/transactions.v1.Accounts/", mux
}

// UnimplementedAccountsHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountsHandler struct{}

func (UnimplementedAccountsHandler) AccountGetViaUser(context.Context, *connect_go.Request[v1.AccountGetViaUserRequest]) (*connect_go.Response[v1.AccountGetViaUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("transactions.v1.Accounts.AccountGetViaUser is not implemented"))
}

func (UnimplementedAccountsHandler) AccountsUser(context.Context, *connect_go.Request[v1.AccountsUserRequest]) (*connect_go.Response[v1.AccountsUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("transactions.v1.Accounts.AccountsUser is not implemented"))
}

func (UnimplementedAccountsHandler) GetBalance(context.Context, *connect_go.Request[v1.GetBalanceRequest]) (*connect_go.Response[v1.GetBalanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("transactions.v1.Accounts.GetBalance is not implemented"))
}

func (UnimplementedAccountsHandler) TransactionGetByID(context.Context, *connect_go.Request[v1.TransactionGetByIDRequest]) (*connect_go.Response[v1.TransactionGetByIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("transactions.v1.Accounts.TransactionGetByID is not implemented"))
}

func (UnimplementedAccountsHandler) TransactionsGetByAccountID(context.Context, *connect_go.Request[v1.TransactionsGetByAccountIDRequest]) (*connect_go.Response[v1.TransactionsGetByAccountIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("transactions.v1.Accounts.TransactionsGetByAccountID is not implemented"))
}

// TransactorClient is a client for the transactions.v1.Transactor service.
type TransactorClient interface {
	TransactWithID(context.Context, *connect_go.Request[v1.TransactWithIDRequest]) (*connect_go.Response[v1.TransactWithIDResponse], error)
	Transact(context.Context, *connect_go.Request[v1.TransactRequest]) (*connect_go.Response[v1.TransactResponse], error)
	TransferCompleteSubscribe(context.Context, *connect_go.Request[v1.TransferCompleteSubscribeRequest]) (*connect_go.ServerStreamForClient[v1.TransferCompleteSubscribeResponse], error)
}

// NewTransactorClient constructs a client for the transactions.v1.Transactor service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTransactorClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TransactorClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &transactorClient{
		transactWithID: connect_go.NewClient[v1.TransactWithIDRequest, v1.TransactWithIDResponse](
			httpClient,
			baseURL+"/transactions.v1.Transactor/TransactWithID",
			opts...,
		),
		transact: connect_go.NewClient[v1.TransactRequest, v1.TransactResponse](
			httpClient,
			baseURL+"/transactions.v1.Transactor/Transact",
			opts...,
		),
		transferCompleteSubscribe: connect_go.NewClient[v1.TransferCompleteSubscribeRequest, v1.TransferCompleteSubscribeResponse](
			httpClient,
			baseURL+"/transactions.v1.Transactor/TransferCompleteSubscribe",
			opts...,
		),
	}
}

// transactorClient implements TransactorClient.
type transactorClient struct {
	transactWithID            *connect_go.Client[v1.TransactWithIDRequest, v1.TransactWithIDResponse]
	transact                  *connect_go.Client[v1.TransactRequest, v1.TransactResponse]
	transferCompleteSubscribe *connect_go.Client[v1.TransferCompleteSubscribeRequest, v1.TransferCompleteSubscribeResponse]
}

// TransactWithID calls transactions.v1.Transactor.TransactWithID.
func (c *transactorClient) TransactWithID(ctx context.Context, req *connect_go.Request[v1.TransactWithIDRequest]) (*connect_go.Response[v1.TransactWithIDResponse], error) {
	return c.transactWithID.CallUnary(ctx, req)
}

// Transact calls transactions.v1.Transactor.Transact.
func (c *transactorClient) Transact(ctx context.Context, req *connect_go.Request[v1.TransactRequest]) (*connect_go.Response[v1.TransactResponse], error) {
	return c.transact.CallUnary(ctx, req)
}

// TransferCompleteSubscribe calls transactions.v1.Transactor.TransferCompleteSubscribe.
func (c *transactorClient) TransferCompleteSubscribe(ctx context.Context, req *connect_go.Request[v1.TransferCompleteSubscribeRequest]) (*connect_go.ServerStreamForClient[v1.TransferCompleteSubscribeResponse], error) {
	return c.transferCompleteSubscribe.CallServerStream(ctx, req)
}

// TransactorHandler is an implementation of the transactions.v1.Transactor service.
type TransactorHandler interface {
	TransactWithID(context.Context, *connect_go.Request[v1.TransactWithIDRequest]) (*connect_go.Response[v1.TransactWithIDResponse], error)
	Transact(context.Context, *connect_go.Request[v1.TransactRequest]) (*connect_go.Response[v1.TransactResponse], error)
	TransferCompleteSubscribe(context.Context, *connect_go.Request[v1.TransferCompleteSubscribeRequest], *connect_go.ServerStream[v1.TransferCompleteSubscribeResponse]) error
}

// NewTransactorHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTransactorHandler(svc TransactorHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/transactions.v1.Transactor/TransactWithID", connect_go.NewUnaryHandler(
		"/transactions.v1.Transactor/TransactWithID",
		svc.TransactWithID,
		opts...,
	))
	mux.Handle("/transactions.v1.Transactor/Transact", connect_go.NewUnaryHandler(
		"/transactions.v1.Transactor/Transact",
		svc.Transact,
		opts...,
	))
	mux.Handle("/transactions.v1.Transactor/TransferCompleteSubscribe", connect_go.NewServerStreamHandler(
		"/transactions.v1.Transactor/TransferCompleteSubscribe",
		svc.TransferCompleteSubscribe,
		opts...,
	))
	return "/transactions.v1.Transactor/", mux
}

// UnimplementedTransactorHandler returns CodeUnimplemented from all methods.
type UnimplementedTransactorHandler struct{}

func (UnimplementedTransactorHandler) TransactWithID(context.Context, *connect_go.Request[v1.TransactWithIDRequest]) (*connect_go.Response[v1.TransactWithIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("transactions.v1.Transactor.TransactWithID is not implemented"))
}

func (UnimplementedTransactorHandler) Transact(context.Context, *connect_go.Request[v1.TransactRequest]) (*connect_go.Response[v1.TransactResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("transactions.v1.Transactor.Transact is not implemented"))
}

func (UnimplementedTransactorHandler) TransferCompleteSubscribe(context.Context, *connect_go.Request[v1.TransferCompleteSubscribeRequest], *connect_go.ServerStream[v1.TransferCompleteSubscribeResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("transactions.v1.Transactor.TransferCompleteSubscribe is not implemented"))
}
